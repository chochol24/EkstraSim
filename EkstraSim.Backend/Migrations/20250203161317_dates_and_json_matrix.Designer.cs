// <auto-generated />
using System;
using EkstraSim.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EkstraSim.Backend.Migrations
{
    [DbContext(typeof(EkstraSimDbContext))]
    [Migration("20250203161317_dates_and_json_matrix")]
    partial class dates_and_json_matrix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageAwayGoalsConceded")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsScored")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsConceded")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsScored")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("HomeTeamId", "AwayTeamId", "Round", "SeasonId")
                        .IsUnique()
                        .HasFilter("[Round] IS NOT NULL AND [SeasonId] IS NOT NULL");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "Name")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedFinalLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSimulations")
                        .HasColumnType("int");

                    b.Property<int>("RoundBeforeSimulation")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SimulationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SimulatedFinalLeagues");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedMatchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AwayWinProbability")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("DrawProbability")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("HomeWinProbability")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSimulations")
                        .HasColumnType("int");

                    b.Property<int>("PredictedAwayScore")
                        .HasColumnType("int");

                    b.Property<int>("PredictedHomeScore")
                        .HasColumnType("int");

                    b.Property<string>("ResultProbabilityMatrixJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("SimulatedRoundId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SimulationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MatchId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SimulatedRoundId");

                    b.ToTable("SimulatedMatchResults");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSimulations")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SimulationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SimulatedRounds");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedTeamInFinalTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageGoalDifference")
                        .HasColumnType("float");

                    b.Property<double>("AverageGoalsConceded")
                        .HasColumnType("float");

                    b.Property<double>("AverageGoalsScored")
                        .HasColumnType("float");

                    b.Property<double>("AveragePoints")
                        .HasColumnType("float");

                    b.Property<double>("EighteenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("EighthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("EleventhPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("FifteenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("FifthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("FirstPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("FourteenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("FourthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("NinthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("RelegationProbability")
                        .HasColumnType("float");

                    b.Property<double>("SecondPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("SeventeenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("SeventhPlaceProbability")
                        .HasColumnType("float");

                    b.Property<int>("SimulatedFinalLeagueId")
                        .HasColumnType("int");

                    b.Property<double>("SixteenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("SixthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<double>("TenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("ThirdPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("ThirteenthPlaceProbability")
                        .HasColumnType("float");

                    b.Property<double>("TopFourProbability")
                        .HasColumnType("float");

                    b.Property<double>("TwelfthPlaceProbability")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SimulatedFinalLeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("SimulatedTeamInFinalTables");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageAwayGoalsConceded")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsConcededCurrentSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsConcededHistorical")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsConcededPreviousSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsScored")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsScoredCurrentSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsScoredHistorical")
                        .HasColumnType("float");

                    b.Property<double?>("AverageAwayGoalsScoredPreviousSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsConceded")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsConcededCurrentSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsConcededHistorical")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsConcededPreviousSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsScored")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsScoredCurrentSeason")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsScoredHistorical")
                        .HasColumnType("float");

                    b.Property<double?>("AverageHomeGoalsScoredPreviousSeason")
                        .HasColumnType("float");

                    b.Property<decimal>("ELO")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Match", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EkstraSim.Backend.Database.Entities.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Season", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedFinalLeague", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedMatchResult", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EkstraSim.Backend.Database.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EkstraSim.Backend.Database.Entities.SimulatedRound", "SimulatedRound")
                        .WithMany("SimulatedMatchResults")
                        .HasForeignKey("SimulatedRoundId");

                    b.Navigation("League");

                    b.Navigation("Match");

                    b.Navigation("Season");

                    b.Navigation("SimulatedRound");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedRound", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedTeamInFinalTable", b =>
                {
                    b.HasOne("EkstraSim.Backend.Database.Entities.SimulatedFinalLeague", "SimulatedFinalLeague")
                        .WithMany("Teams")
                        .HasForeignKey("SimulatedFinalLeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EkstraSim.Backend.Database.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SimulatedFinalLeague");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.League", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Season", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedFinalLeague", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.SimulatedRound", b =>
                {
                    b.Navigation("SimulatedMatchResults");
                });

            modelBuilder.Entity("EkstraSim.Backend.Database.Entities.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
